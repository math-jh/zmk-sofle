#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <1000>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    macros {
        leader: snippet_leader {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <5>;
            wait-ms = <5>;
            bindings = <&macro_tap &kp LC(LG(LA(SPACE))) &kp LC(LG(LS(RBKT)))>;
        };
        leader_alt: snippet_leader_alternative {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <5>;
            wait-ms = <5>;
            bindings = <&macro_tap &kp LC(LG(LA(SPACE))) &kp LC(LG(LS(LA(RBKT))))>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <200>;
            key-positions = <56 60>;
            bindings = <&kp ENTER>;
        };
        combo_leader_alternative {
            timeout-ms = <200>;
            key-positions = <57 59>;
            bindings = <&leader_alt>;
        };
        combo_vivaldi {
            timeout-ms = <150>;
            key-positions = <62 63>;
            bindings = <&kp LG(LALT)>;
        };
        combo_left_rectangle {
            timeout-ms = <150>;
            key-positions = <53 54>;
            bindings = <&kp LC(LALT)>;
        };
        combo_final_consonant_1 {
            timeout-ms = <150>;
            key-positions = <9 10>;
            bindings = <&kp LBKT>;
        };
        combo_win {
            timeout-ms = <150>;
            key-positions = <53 63>;
            bindings = <&tog_on 2>;
            layers = <0>;
        };
        combo_mac {
            timeout-ms = <150>;
            key-positions = <53 63>;
            bindings = <&tog_on 2>;
            layers = <2>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <275>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        llt: layer_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&tog>;
            display-name = "Layer-Tap";
        };

        mta: mod_tap_alternative {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mo_tog_on: mo_tog_on {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog_on>;
        };

        gtesc: grave_tilde_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LALT|MOD_LSFT|MOD_RGUI|MOD_RALT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LALT|MOD_LSFT|MOD_RALT|MOD_RSFT)>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MacBase {
            bindings = <
&gtesc          &kp N1       &kp N2        &kp N3        &kp N4     &kp N5     &kp UP_ARROW     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB         &kp Q        &kp W         &kp E         &kp R      &kp T      &kp DOWN_ARROW   &kp Y    &kp U      &kp I      &kp O     &kp P     &kp BACKSLASH
&mta CAPS RALT  &kp A        &kp S         &kp D         &kp F      &kp G      &kp LEFT_ARROW   &kp H    &kp J      &kp K      &kp L     &kp SEMI  &kp APOS
&kp LSHIFT      &kp Z        &kp X         &kp C         &kp V      &kp B      &kp RIGHT_ARROW  &kp N    &kp M      &kp COMMA  &kp DOT   &kp FSLH  &mt RSHFT ENTER
&kp C_MUTE      &mo_tog 5 4  &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE  &bspc_del  &none            &leader  &kp SPACE  &kp LCTRL  &kp RALT  &mo 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "MacBase";
        };

        MacFn {
            bindings = <
&kp C_BRI_DEC    &kp C_BRI_DEC    &kp LC(UP)       &kp LG(SPACE)         &kp LG(LS(N4))  &kp LG(LS(N5))  &trans  &kp C_PREV         &kp C_PP           &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN    &kp C_VOL_UP
&out OUT_TOG     &bt BT_NXT       &bt BT_CLR       &trans                &trans          &trans          &trans  &trans             &trans             &trans      &kp LBKT    &kp RBKT        &trans
&rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &trans                &trans          &trans          &trans  &trans             &kp LC(LG(LA(J)))  &trans      &trans      &trans          &trans
&rgb_ug RGB_SPD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &kp LC(LG(LA(C)))     &trans          &trans          &trans  &kp LC(LG(LA(N)))  &trans             &trans      &trans      &trans          &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans                &trans          &trans          &trans  &tog_on 2          &trans             &trans      &trans      &trans
            >;
            sensor-bindings = <&rgb_encoder>;
            display-name = "MacFn";
        };

        WinBase {
            bindings = <
&gtesc          &kp N1       &kp N2        &kp N3        &kp N4     &kp N5     &kp UP_ARROW     &kp N6   &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB         &kp Q        &kp W         &kp E         &kp R      &kp T      &kp DOWN_ARROW   &kp Y    &kp U      &kp I      &kp O     &kp P     &kp BACKSLASH
&mta CAPS RALT  &kp A        &kp S         &kp D         &kp F      &kp G      &kp LEFT_ARROW   &kp H    &kp J      &kp K      &kp L     &kp SEMI  &kp APOS
&kp LSHIFT      &kp Z        &kp X         &kp C         &kp V      &kp B      &kp RIGHT_ARROW  &kp N    &kp M      &kp COMMA  &kp DOT   &kp FSLH  &mt RSHFT ENTER
&kp C_MUTE      &mo_tog 5 4  &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE  &bspc_del  &none            &leader  &kp SPACE  &kp LCTRL  &kp RALT  &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "WinBase";
        };

        WinFn {
            bindings = <
&kp F1           &kp F2           &kp F3           &kp F4  &kp F5  &kp F6  &trans  &kp F7  &kp F8  &kp F9  &kp F10   &kp F11   &kp F12
&out OUT_TOG     &bt BT_NXT       &bt BT_CLR       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LBKT  &kp RBKT  &trans
&rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans
&rgb_ug RGB_SPD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans
            >;
            sensor-bindings = <&rgb_encoder>;
            display-name = "WinFn";
        };

        Navigation {
            bindings = <
&trans  &trans      &trans  &trans  &trans  &trans  &mmv MOVE_UP     &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans      &trans  &trans  &trans  &trans  &mmv MOVE_DOWN   &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
&trans  &trans      &trans  &trans  &trans  &trans  &mmv MOVE_LEFT   &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans      &trans  &trans  &trans  &trans  &mmv MOVE_RIGHT  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &tog_off 4  &trans  &trans  &trans  &trans  &trans           &trans  &trans     &trans     &trans  &trans 
            >;

            label = "Nav";
            sensor-bindings = <&scroll_encoder>;
        };

        Symbol {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_UP     &trans  &trans  &trans  &kp LBKT  &kp RBKT  &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_DOWN   &trans  &trans  &trans  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT   &trans  &trans  &trans  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &trans    &trans 
            >;

            label = "Sym";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
