#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <1000>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    NavScr: NavScr {
        compatible = "zmk,behavior-tap-dance";
        label = "NAVSCR";
        #binding-cells = <0>;
        tapping-term-ms = <500>;
        bindings = <&llt 2 2>, <&tog 3>;
    };

    msel1: mouse_selector_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "msel1";
        #binding-cells = <0>;
        tapping-term-ms = <500>;
        bindings = <&to 0>, <&to 3>;
    };

    msel2: mouse_selector_2 {
        compatible = "zmk,behavior-tap-dance";
        label = "msel2";
        #binding-cells = <0>;
        tapping-term-ms = <500>;
        bindings = <&to 0>, <&to 2>;
    };

    ltd: latex_tapdance {
        compatible = "zmk,behavior-tap-dance";
        label = "latex_td";
        #binding-cells = <0>;
        bindings = <&sk LC(LG(LSHFT))>, <&kp LC(LG(LS(RBKT)))>;
        tapping-term-ms = <500>;
    };

    ltda: latex_tapdance_alternative {
        compatible = "zmk,behavior-tap-dance";
        label = "latex_td_a";
        #binding-cells = <0>;
        bindings = <&sk LA(LC(LG(LSHFT)))>, <&two_alt>;
        tapping-term-ms = <500>;
    };

    macros {
        univ: universal_snippet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            bindings
                = <&macro_tap &kp F20>
                , <&ltd>
                ;
        };
        two_alt: two-term_alternative {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_tap &kp LC(LG(LS(RBKT)))>
                , <&sk LALT>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <200>;
            key-positions = <56 60>;
            bindings = <&kp ENTER>;
        };
        combo_alter {
            timeout-ms = <200>;
            key-positions = <57 59>;
            bindings = <&ltda>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <500>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        asl: auto_shift_alternative {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <500>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        llt: layer_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&tog>;
            display-name = "Layer-Tap";
        };

        mocmd: momentary_cmd {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&kp LGUI>;
            mods = <(MOD_RALT)>;
            keep-mods = <(MOD_RALT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&gresc      AS(N1)   AS(N2)        AS(N3)        AS(N4)     AS(N5)         &kp UP_ARROW     AS(N6)  AS(N7)     AS(N8)     &asl MINUS N9  &asl EQUAL N0  AS(LBKT)
&kp TAB     AS(Q)    AS(W)         AS(E)         AS(R)      AS(T)          &kp DOWN_ARROW   AS(Y)   AS(U)      AS(I)      AS(O)          AS(P)          AS(BACKSLASH)
&kp RCMD    AS(A)    AS(S)         AS(D)         AS(F)      AS(G)          &kp LEFT_ARROW   AS(H)   AS(J)      AS(K)      AS(L)          AS(SEMI)       AS(APOS)
&kp LSHFT   AS(Z)    AS(X)         AS(C)         AS(V)      AS(B)          &kp RIGHT_ARROW  AS(N)   AS(M)      AS(COMMA)  AS(DOT)        AS(FSLH)       &mt LSHFT ENTER
&kp C_MUTE  &NavScr  &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE  &kp BACKSPACE  &trans           &univ   &kp SPACE  &kp LCTRL  &kp RALT       &mocmd
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Base";
        };

        Function {
            bindings = <
&kp GRAVE     &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp LC(UP_ARROW)   &kp LG(SPACE)    &kp LG(R)   &trans  &kp C_PREVIOUS     &kp C_PP           &kp C_NEXT  &kp MINUS  &kp EQUAL  &trans
&out OUT_TOG  &bt BT_NXT            &bt BT_CLR            &rgb_ug RGB_BRI    &rgb_ug RGB_SPI  &trans      &trans  &trans             &trans             &trans      &kp LBKT   &kp RBKT   &trans
&kp CAPSLOCK  &rgb_ug RGB_TOG       &rgb_ug RGB_EFF       &rgb_ug RGB_BRD    &rgb_ug RGB_SPD  &trans      &trans  &trans             &kp LC(LG(LA(J)))  &trans      &trans     &trans     &trans
&kp LSHFT     &kp F20               &trans                &kp LC(LG(LA(C)))  &trans           &trans      &trans  &kp LC(LG(LA(N)))  &trans             &trans      &trans     &trans     &trans
&kp C_MUTE    &trans                &trans                &trans             &trans           &kp DELETE  &trans  &trans             &trans             &trans      &trans     &trans
            >;

            display-name = "Fn";
            sensor-bindings = <&scroll_encoder>;


        };

        Navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_UP     &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_DOWN   &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &kp PG_UP
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT   &trans  &trans     &trans     &mo 3   &trans  &kp PG_DN
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_RIGHT  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &msel1  &trans  &trans  &trans  &trans  &trans           &trans  &trans     &trans     &trans  &trans 
            >;

            label = "Nav";
            sensor-bindings = <&inc_dec_kp 0 0>;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_DOWN   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_UP     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_RIGHT  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &msel2  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans
            >;

            label = "Scroll";
        };
    };
};
