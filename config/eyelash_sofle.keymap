#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <1000>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    NavScr: NavScr {
        compatible = "zmk,behavior-tap-dance";
        label = "NAVSCR";
        #binding-cells = <0>;
        tapping-term-ms = <500>;
        bindings = <&llt 2 2>, <&tog 3>;
    };

    msel1: mouse_selector_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "msel1";
        #binding-cells = <0>;
        tapping-term-ms = <500>;
        bindings = <&to 0>, <&to 3>;
    };

    msel2: mouse_selector_2 {
        compatible = "zmk,behavior-tap-dance";
        label = "msel2";
        #binding-cells = <0>;
        tapping-term-ms = <500>;
        bindings = <&to 0>, <&to 2>;
    };

    multirole_9: multirole_9 {
        compatible = "zmk,behavior-tap-dance";
        label = "multirole_9";
        #binding-cells = <0>;
        bindings = <AS(N9)>, <AS(LBKT)>;
        tapping-term-ms = <250>;
    };

    multirole_0: multirole_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "multirole_0";
        #binding-cells = <0>;
        bindings = <AS(N0)>, <AS(RBKT)>;
        tapping-term-ms = <250>;
    };

    multirole_bkt: multirole_bracket {
        compatible = "zmk,behavior-tap-dance";
        label = "multirole_bkt";
        #binding-cells = <0>;
        bindings = <AS(MINUS)>, <AS(EQUAL)>;
        tapping-term-ms = <250>;
    };

    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <200>;
            key-positions = <56 60>;
            bindings = <&kp ENTER>;
        };
        combo_open_alternative {
            timeout-ms = <200>;
            key-positions = <57 59>;
            bindings = <&kp LC(LG(LS(LA(RBKT))))>;
        };
        combo_vivaldi {
            timeout-ms = <150>;
            key-positions = <62 63>;
            bindings = <&kp LG(LALT)>;
        };
        combo_left_rectangle {
            timeout-ms = <150>;
            key-positions = <53 54>;
            bindings = <&kp LC(LALT)>;
        };
        combo_final_consonant {
            timeout-ms = <150>;
            key-positions = <10 11>;
            bindings = <&kp LBKT>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <275>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
        llt: layer_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&tog>;
            display-name = "Layer-Tap";
        };

        mta: mod_tap_alternative {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&gresc               AS(N1)   AS(N2)        AS(N3)        AS(N4)           AS(N5)         &kp UP_ARROW     AS(N6)                AS(N7)           AS(N8)     &multirole_9   &multirole_0   &multirole_bkt
&kp TAB              &kp Q    &kp W         &kp E         &kp R            &kp T          &kp DOWN_ARROW   &kp Y                 &kp U            &kp I      &kp O          &kp P          &kp BACKSLASH
&kp RALT             &kp A    &kp S         &kp D         &kp F            &kp G          &kp LEFT_ARROW   &kp H                 &kp J            &kp K      &kp L          AS(SEMI)       AS(APOS)
&mt LSHFT CAPSLOCK   &kp Z    &kp X         &kp C         &kp V            &kp B          &kp RIGHT_ARROW  &kp N                 &kp M            AS(COMMA)  AS(DOT)        AS(FSLH)       &mt RSHFT ENTER
&kp C_MUTE           &NavScr  &kp LEFT_ALT  &kp LEFT_GUI  &mta LCMD SPACE  &kp BACKSPACE  &trans           &kp LC(LG(LS(RBKT)))  &mta LCMD SPACE  &kp LCTRL  &kp RALT       &mo 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Base";
        };

        Function {
            bindings = <
&kp F1           &kp F2           &kp F3           &kp F4             &kp F5  &kp F6      &trans  &kp F7             &kp F8             &kp F9      &kp F10    &kp F11    &kp F12
&out OUT_TOG     &bt BT_NXT       &bt BT_CLR       &trans             &trans  &trans      &trans  &trans             &trans             &trans      &kp LBKT   &kp RBKT   &trans
&rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &trans             &trans  &trans      &trans  &trans             &kp LC(LG(LA(J)))  &trans      &trans     &trans     &trans
&rgb_ug RGB_SPD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &kp LC(LG(LA(C)))  &trans  &trans      &trans  &kp LC(LG(LA(N)))  &trans             &trans      &trans     &trans     &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans             &trans  &kp DELETE  &trans  &trans             &trans             &trans      &trans     &trans
            >;
            sensor-bindings = <&rgb_encoder>;
            display-name = "Fn";
        };

        Navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_UP     &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_DOWN   &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT   &trans  &trans     &trans     &mo 3   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mmv MOVE_RIGHT  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &msel1  &trans  &trans  &trans  &trans  &trans           &trans  &trans     &trans     &trans  &trans 
            >;

            label = "Nav";
            sensor-bindings = <&scroll_encoder>;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_DOWN   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_UP     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_RIGHT  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &msel2  &trans  &trans  &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans
            >;

            label = "Scroll";
        };
    };
};
